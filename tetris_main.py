import pygame
from random import choice
import random
FPS = 3

RED = 0xFF0000
BLUE = 0x0000FF
YELLOW = 0xFFC91F
GREEN = 0x00FF00
GAME_COLORS = [RED, BLUE, YELLOW, GREEN]

screenWidth = 1920
screenHeight = 1080
gameFieldHeight = 20
gameFieldWidth = 10


class tetromino:
    '''
    Фигуры, состоящие из 4-х квадратиков.
    '''
    def __init__(self, screen: pygame.Surface):
        self.screen = screen
        self.x = 0
        self.y = 0
        '''
        Координаты ...
        '''
        self.color = choice(GAME_COLORS)



    def move(self):

    def rotate(self):


class gameField:
    '''
    Поле, на котором идет игра + данные о текущей игре (текущая заполненность, очки, уровень)
    '''
    def __int__(self):
        score = 0
        field = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]] # список клеток. 0 - пустая клетка. Другая цифра (в зависимости от цвета) - заполненная клетка
        x0 = 0
        y0 = 0
        '''
        Координаты левого верхнего угла поля
        '''
        width = 400
        height = 800
        def draw(self, figure):
        '''
        figure - текущая движущаяся фигура
        Рисует ячейки из field и фигуру, которая движется.
        '''

    def selfDestruction(self):
        '''
        Очищает ряд, когда он он полностью заполнен квадратиками.
        '''